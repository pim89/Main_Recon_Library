function [img_filt,mask,bias] = hum3D(img,sigmag,mask)
% Inhomogeneity correction function
% Initially made by Federico D'Agata
% Adjusted by Tom Bruijnen

% Check input
if nargin < 2
    sigmag=.15*size(img,1);
end

if ~isreal(img)
    img=abs(img);
end

% Create mask if none is provided
if nargin < 3
    mask=ones(size(img));               
end

% HUM part
img_small=imresize(img,[128 128]);
dim=size(img_small);
[X,Y,Z] = meshgrid(1:dim(1), 1:dim(2),1:dim(3));
x1d = reshape(X, numel(X), 1);
y1d = reshape(Y, numel(Y), 1);
z1d = reshape(Z, numel(Z), 1);

%z1d = double(reshape(z, numel(z), 1));
x = [x1d y1d z1d];

%--------------------------------------------------------
% Get a 4th order polynomial model.
% CHANGE THE ORDER HERE IF YOU WANT TO.
%--------------------------------------------------------
polynomialOrder = 4;
p = polyfitn(x, img_small(:), polynomialOrder);

% Evaluate on a grid and plot:
zg = polyvaln(p, x);
bias = imresize(reshape(zg, dim(1:3)),[size(img,1) size(img,2)]);
bias(bias < 0 )=1;
img_filt=mask.*(img./bias);

end
